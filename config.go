package webds

import (
	"context"
	"github.com/lightjiang/webds/core"
	"github.com/lightjiang/webds/message"
	"github.com/rs/xid"
	"net/http"
	"time"
)

const (
	// DefaultWebsocketWriteTimeout 0, no timeout
	DefaultWebsocketWriteTimeout = 0
	// DefaultWebsocketReadTimeout 0, no timeout
	DefaultWebsocketReadTimeout = 0
	// DefaultWebsocketPongTimeout 60 * time.Second
	DefaultWebsocketPongTimeout = 60 * time.Second
	// DefaultWebsocketPingPeriod (DefaultPongTimeout * 9) / 10
	DefaultWebsocketPingPeriod = (DefaultWebsocketPongTimeout * 9) / 10
	// DefaultWebsocketMaxMessageSize 1024
	DefaultWebsocketMaxMessageSize = 1024
	// DefaultWebsocketReadBufferSize 4096
	DefaultWebsocketReadBufferSize = 4096
	// DefaultWebsocketWriterBufferSize 4096
	DefaultWebsocketWriterBufferSize = 4096
	// DefaultEvtMessageKey is the default prefix of the underline websocket events
	// that are being established under the hoods.
	//
	// Last character of the prefix should be ':'.
)

// DefaultIDGenerator returns a random unique for a new conn.
// Used when cfg.IDGenerator is nil.
func DefaultIDGenerator(r *http.Request) string {
	id := r.Header.Get("id")
	if len(id) != 0 {
		return id
	}
	return xid.New().String()
}

var _ core.ConnCfg = &Config{}

// Config the websocket server configuration
// all of these are optional.
type Config struct {
	// the server id
	ID string
	// IDGenerator used to create (and later on, set)
	// an ID for each incoming websocket connections (clients).
	// The request is an input parameter which you can use to generate the ID (from headers for example).
	// If empty then the ID is generated by DefaultIDGenerator: randomString(64)
	IDGenerator func(r *http.Request) string
	// record the url address of the superior cluster
	SuperiorMaster []string
	// record the url address of the lateral cluster
	LateralMaster []string
	EnableCluster bool
	// MsgPrefix is the prefix of the underline websocket events that are being established under the hoods.
	// This prefix is visible only to the javascript side (code) and it has nothing to do
	// with the message that the end-user receives.
	// Do not change it unless it is absolutely necessary.
	//
	// If empty then defaults to []byte("ws").
	MsgPrefix []byte
	// Error is the function that will be fired if any client couldn't upgrade the HTTP conn
	// to a websocket conn, a handshake error.
	Error func(w http.ResponseWriter, r *http.Request, status int, reason error)
	// CheckOrigin a function that is called right before the handshake,
	// if returns false then that client is not allowed to connect with the websocket server.
	CheckOrigin func(r *http.Request) bool
	// HandshakeTimeout specifies the duration for the handshake to complete.
	HandshakeTimeout time.Duration
	// WriteTimeout time allowed to write a message to the conn.
	// 0 means no timeout.
	// Default value is 0
	WriteTimeout time.Duration
	// ReadTimeout time allowed to read a message from the conn.
	// 0 means no timeout.
	// Default value is 0
	readTimeout time.Duration
	// PongTimeout allowed to read the next pong message from the conn.
	// Default value is 60 * time.Second
	pongTimeout time.Duration
	// PingPeriod send ping messages to the conn within this period. Must be less than PongTimeout.
	// Default value is 60 *time.Second
	pingPeriod time.Duration
	// MaxMessageSize max message size allowed from conn.
	// Default value is 1024
	maxMessageSize int64
	// BinaryMessages set it to true in order to denotes binary data messages instead of utf-8 text
	// compatible if you wanna use the Connection's EmitMessage to send a custom binary data to the client, like a native server-client communication.
	// Default value is false
	binaryMessages bool
	// ReadBufferSize is the buffer size for the conn reader.
	// Default value is 4096
	readBufferSize int64
	// WriteBufferSize is the buffer size for the conn writer.
	// Default value is 4096
	writeBufferSize int
	// EnableCompression specify if the server should attempt to negotiate per
	// message compression (RFC 7692). Setting this value to true does not
	// guarantee that compression will be supported. Currently only "no context
	// takeover" modes are supported.
	//
	// Defaults to false and it should be remain as it is, unless special requirements.
	EnableCompression bool

	// Subprotocols specifies the server's supported protocols in order of
	// preference. If this field is set, then the Upgrade method negotiates a
	// subprotocol by selecting the first match in this list with a protocol
	// requested by the client.
	Subprotocols  []string
	msgSerializer *message.Serializer
	ctx           context.Context
	webds         core.Webds
}

func (c *Config) MsgSerializer() *message.Serializer {
	return c.msgSerializer
}

func (c *Config) Ctx() context.Context {
	return c.ctx
}

func (c *Config) Webds() core.Webds {
	return c.webds
}

func (c *Config) PingPeriod() time.Duration {
	return c.pingPeriod
}

func (c *Config) ReadTimeout() time.Duration {
	return c.readTimeout
}

func (c *Config) ReadBufferSize() int64 {
	return c.readBufferSize
}

func (c *Config) BinaryMessages() bool {
	return c.binaryMessages
}

// Validate validates the configuration
func (c *Config) Validate() {
	if c.ID == "" {
		c.ID = xid.New().String()
	}
	if len(c.MsgPrefix) == 0 {
		c.MsgPrefix = message.DefaultMsgPrefix
	}
	if c.msgSerializer == nil {
		c.msgSerializer = message.NewSerializer(c.MsgPrefix)
	}
	if c.ctx == nil {
		c.ctx = context.Background()
	}
	// 0 means no timeout.
	if c.WriteTimeout < 0 {
		c.WriteTimeout = DefaultWebsocketWriteTimeout
	}

	if c.readTimeout < 0 {
		c.readTimeout = DefaultWebsocketReadTimeout
	}

	if c.pongTimeout < 0 {
		c.pongTimeout = DefaultWebsocketPongTimeout
	}

	if c.pingPeriod <= 0 {
		c.pingPeriod = DefaultWebsocketPingPeriod
	}

	if c.maxMessageSize <= 0 {
		c.maxMessageSize = DefaultWebsocketMaxMessageSize
	}

	if c.readBufferSize <= 0 {
		c.readBufferSize = DefaultWebsocketReadBufferSize
	}

	if c.writeBufferSize <= 0 {
		c.writeBufferSize = DefaultWebsocketWriterBufferSize
	}

	if c.Error == nil {
		c.Error = func(w http.ResponseWriter, r *http.Request, status int, reason error) {
			//empty
		}
	}

	if c.CheckOrigin == nil {
		c.CheckOrigin = func(r *http.Request) bool {
			// allow all connections by default
			return true
		}
	}

	if c.IDGenerator == nil {
		c.IDGenerator = DefaultIDGenerator
	}

}
